// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: app/v1/app.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AppService_WriteChatMessage_FullMethodName        = "/app.v1.AppService/WriteChatMessage"
	AppService_ReadChatMessageWithPage_FullMethodName = "/app.v1.AppService/ReadChatMessageWithPage"
	AppService_ReadChatMessageWithTime_FullMethodName = "/app.v1.AppService/ReadChatMessageWithTime"
	AppService_SubscribeChat_FullMethodName           = "/app.v1.AppService/SubscribeChat"
)

// AppServiceClient is the client API for AppService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppServiceClient interface {
	WriteChatMessage(ctx context.Context, in *WriteChatMessageRequest, opts ...grpc.CallOption) (*WriteChatMessageResponse, error)
	ReadChatMessageWithPage(ctx context.Context, in *ReadChatMessageWithPageRequest, opts ...grpc.CallOption) (*ReadChatMessageWithPageResponse, error)
	ReadChatMessageWithTime(ctx context.Context, in *ReadChatMessageWithTimeRequest, opts ...grpc.CallOption) (*ReadChatMessageWithTimeResponse, error)
	SubscribeChat(ctx context.Context, in *SubscribeChatRequest, opts ...grpc.CallOption) (AppService_SubscribeChatClient, error)
}

type appServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppServiceClient(cc grpc.ClientConnInterface) AppServiceClient {
	return &appServiceClient{cc}
}

func (c *appServiceClient) WriteChatMessage(ctx context.Context, in *WriteChatMessageRequest, opts ...grpc.CallOption) (*WriteChatMessageResponse, error) {
	out := new(WriteChatMessageResponse)
	err := c.cc.Invoke(ctx, AppService_WriteChatMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) ReadChatMessageWithPage(ctx context.Context, in *ReadChatMessageWithPageRequest, opts ...grpc.CallOption) (*ReadChatMessageWithPageResponse, error) {
	out := new(ReadChatMessageWithPageResponse)
	err := c.cc.Invoke(ctx, AppService_ReadChatMessageWithPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) ReadChatMessageWithTime(ctx context.Context, in *ReadChatMessageWithTimeRequest, opts ...grpc.CallOption) (*ReadChatMessageWithTimeResponse, error) {
	out := new(ReadChatMessageWithTimeResponse)
	err := c.cc.Invoke(ctx, AppService_ReadChatMessageWithTime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) SubscribeChat(ctx context.Context, in *SubscribeChatRequest, opts ...grpc.CallOption) (AppService_SubscribeChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &AppService_ServiceDesc.Streams[0], AppService_SubscribeChat_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &appServiceSubscribeChatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AppService_SubscribeChatClient interface {
	Recv() (*SubscribeChatResponse, error)
	grpc.ClientStream
}

type appServiceSubscribeChatClient struct {
	grpc.ClientStream
}

func (x *appServiceSubscribeChatClient) Recv() (*SubscribeChatResponse, error) {
	m := new(SubscribeChatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AppServiceServer is the server API for AppService service.
// All implementations must embed UnimplementedAppServiceServer
// for forward compatibility
type AppServiceServer interface {
	WriteChatMessage(context.Context, *WriteChatMessageRequest) (*WriteChatMessageResponse, error)
	ReadChatMessageWithPage(context.Context, *ReadChatMessageWithPageRequest) (*ReadChatMessageWithPageResponse, error)
	ReadChatMessageWithTime(context.Context, *ReadChatMessageWithTimeRequest) (*ReadChatMessageWithTimeResponse, error)
	SubscribeChat(*SubscribeChatRequest, AppService_SubscribeChatServer) error
	mustEmbedUnimplementedAppServiceServer()
}

// UnimplementedAppServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAppServiceServer struct {
}

func (UnimplementedAppServiceServer) WriteChatMessage(context.Context, *WriteChatMessageRequest) (*WriteChatMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteChatMessage not implemented")
}
func (UnimplementedAppServiceServer) ReadChatMessageWithPage(context.Context, *ReadChatMessageWithPageRequest) (*ReadChatMessageWithPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadChatMessageWithPage not implemented")
}
func (UnimplementedAppServiceServer) ReadChatMessageWithTime(context.Context, *ReadChatMessageWithTimeRequest) (*ReadChatMessageWithTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadChatMessageWithTime not implemented")
}
func (UnimplementedAppServiceServer) SubscribeChat(*SubscribeChatRequest, AppService_SubscribeChatServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeChat not implemented")
}
func (UnimplementedAppServiceServer) mustEmbedUnimplementedAppServiceServer() {}

// UnsafeAppServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppServiceServer will
// result in compilation errors.
type UnsafeAppServiceServer interface {
	mustEmbedUnimplementedAppServiceServer()
}

func RegisterAppServiceServer(s grpc.ServiceRegistrar, srv AppServiceServer) {
	s.RegisterService(&AppService_ServiceDesc, srv)
}

func _AppService_WriteChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteChatMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).WriteChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_WriteChatMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).WriteChatMessage(ctx, req.(*WriteChatMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_ReadChatMessageWithPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadChatMessageWithPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).ReadChatMessageWithPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_ReadChatMessageWithPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).ReadChatMessageWithPage(ctx, req.(*ReadChatMessageWithPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_ReadChatMessageWithTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadChatMessageWithTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).ReadChatMessageWithTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_ReadChatMessageWithTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).ReadChatMessageWithTime(ctx, req.(*ReadChatMessageWithTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_SubscribeChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeChatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AppServiceServer).SubscribeChat(m, &appServiceSubscribeChatServer{stream})
}

type AppService_SubscribeChatServer interface {
	Send(*SubscribeChatResponse) error
	grpc.ServerStream
}

type appServiceSubscribeChatServer struct {
	grpc.ServerStream
}

func (x *appServiceSubscribeChatServer) Send(m *SubscribeChatResponse) error {
	return x.ServerStream.SendMsg(m)
}

// AppService_ServiceDesc is the grpc.ServiceDesc for AppService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.v1.AppService",
	HandlerType: (*AppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteChatMessage",
			Handler:    _AppService_WriteChatMessage_Handler,
		},
		{
			MethodName: "ReadChatMessageWithPage",
			Handler:    _AppService_ReadChatMessageWithPage_Handler,
		},
		{
			MethodName: "ReadChatMessageWithTime",
			Handler:    _AppService_ReadChatMessageWithTime_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeChat",
			Handler:       _AppService_SubscribeChat_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "app/v1/app.proto",
}
